// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package frc.robot.subsystems;

import frc.robot.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.PIDSource;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.SpeedControllerGroup;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class Chassis extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
private WPI_TalonSRX leftFrontMotor;
private WPI_TalonSRX leftBackMotor;
private DifferentialDrive leftDiffyDrive;
private WPI_TalonSRX rightFrontMotor;
private WPI_TalonSRX rightBackMotor;
private DifferentialDrive rightDiffyDrive;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public final int TANK = 0;
    public final int ARCADE = 1;
    public final int CURVATURE = 2;
    public int activeDriveMode = TANK;
    public final double STOP = 0.0;
    private SpeedControllerGroup leftSideSpeedControllerGroup;
    private SpeedControllerGroup rightSideSpeedControllerGroup;
    private DifferentialDrive myDifferentialDrive;

    public Chassis() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
leftFrontMotor = new WPI_TalonSRX(7);


        
leftBackMotor = new WPI_TalonSRX(10);


        
leftDiffyDrive = new DifferentialDrive(leftFrontMotor, leftBackMotor);
addChild("LeftDiffyDrive",leftDiffyDrive);
leftDiffyDrive.setSafetyEnabled(true);
leftDiffyDrive.setExpiration(0.1);
leftDiffyDrive.setMaxOutput(1.0);

        
rightFrontMotor = new WPI_TalonSRX(2);


        
rightBackMotor = new WPI_TalonSRX(3);


        
rightDiffyDrive = new DifferentialDrive(rightFrontMotor, rightBackMotor);
addChild("RightDiffyDrive",rightDiffyDrive);
rightDiffyDrive.setSafetyEnabled(true);
rightDiffyDrive.setExpiration(0.1);
rightDiffyDrive.setMaxOutput(1.0);

        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        leftSideSpeedControllerGroup = new SpeedControllerGroup(leftFrontMotor, leftBackMotor);
        rightSideSpeedControllerGroup = new SpeedControllerGroup(rightFrontMotor, rightBackMotor);
        myDifferentialDrive = new DifferentialDrive(leftSideSpeedControllerGroup, rightSideSpeedControllerGroup);

    }

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new drive());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop

    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void setTankDrivePower(double leftStick, double rightStick) {
        myDifferentialDrive.tankDrive(-leftStick, -rightStick);

    }

    public void setArcadeDrivePower(double y, double x) {
        myDifferentialDrive.arcadeDrive(-y, x);

    }

    public void setCurvatureDrivePower(double y, double x, boolean pivot) {
        myDifferentialDrive.curvatureDrive(-y, x, pivot);

    }

}
