// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package frc.robot.subsystems;


import frc.robot.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.PIDSource;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.ADXRS450_Gyro;
import edu.wpi.first.wpilibj.SpeedControllerGroup;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;
import edu.wpi.first.wpilibj.geometry.Pose2d;
import edu.wpi.first.wpilibj.geometry.Rotation2d;
import edu.wpi.first.wpilibj.interfaces.Gyro;
import edu.wpi.first.wpilibj.kinematics.DifferentialDriveKinematics;
import edu.wpi.first.wpilibj.kinematics.DifferentialDriveOdometry;
import edu.wpi.first.wpilibj.kinematics.DifferentialDriveWheelSpeeds;
import com.revrobotics.CANSparkMax;
import com.revrobotics.CANEncoder;
import com.revrobotics.CANSparkMaxLowLevel.MotorType;

/**
 *
 */
public class Chassis extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    //CHANGE THESE BRO YOU GOTTA
    public static final double ksVolts = 0.22;
    public static final double kvVoltSecondsPerMeter = 1.98;
    public static final double kaVoltSecondsSquaredPerMeter = 0.2;
    public static final double kPDriveVel = 8.5;
    public static final double kTrackwidthMeters = 0.69;
    //in meters
    public static final double kMaxSpeedMsPerSecond = 3;
    public static final double kMaxAccelerationMsPerSecondSquared = 3;
    //ramsete
    public static final double kRamseteB = 2;
    public static final double kRamseteZeta = 0.7;
    //gyro
    public static final boolean kGyroReversed = false;

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final CANSparkMax leftFrontMotor = new CANSparkMax(0, MotorType.kBrushless);
    private final CANSparkMax rightFrontMotor = new CANSparkMax(1, MotorType.kBrushless);
    private final CANSparkMax leftRearMotor = new CANSparkMax(2, MotorType.kBrushless);
    private final CANSparkMax rightRearMotor = new CANSparkMax(3, MotorType.kBrushless);
    private final CANEncoder leftFrontEncoder = new CANEncoder(leftFrontMotor);
    private final CANEncoder rightFrontEncoder = new CANEncoder(rightFrontMotor);
    private final CANEncoder leftRearEncoder = new CANEncoder(leftRearMotor);
    private final CANEncoder rightRearEncoder = new CANEncoder(rightRearMotor);

    private final SpeedControllerGroup leftDrive =
        new SpeedControllerGroup(leftFrontMotor, leftRearMotor);
    private final SpeedControllerGroup rightDrive =
        new SpeedControllerGroup(rightFrontMotor, rightRearMotor);
    private final DifferentialDrive diffyDrive = new DifferentialDrive(leftDrive, rightDrive);

    private final Gyro gyro = new ADXRS450_Gyro();
    
    private final DifferentialDriveOdometry diffyOdometry;

    //i very well may throw myself on the robot during auto and be the bot
    
    public static final DifferentialDriveKinematics kDriveKinematics =
        new DifferentialDriveKinematics(kTrackwidthMeters);
    
    public Chassis() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        diffyOdometry = new DifferentialDriveOdometry(Rotation2d.fromDegrees(getHeading()));
}

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new AutoPathOne());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop
        diffyOdometry.update(Rotation2d.fromDegrees(getHeading()), getLeftEncodersValue(),
         rightFrontEncoder.getPosition());

    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public double getHeading(){
        return Math.IEEEremainder(gyro.getAngle(), 360) * (Chassis.kGyroReversed ? -1.0 : 1.0);
    }
    public void zeroHeading(){
        gyro.reset();
    }
    public double getTurnRate(){
        return gyro.getRate() * (Chassis.kGyroReversed ? -1.0 : 1.0);
    }
    public Pose2d getPose(){
        return diffyOdometry.getPoseMeters();
    }
    public void resetOdometry(Pose2d pose){
        resetEncoders();
        diffyOdometry.resetPosition(pose, Rotation2d.fromDegrees(getHeading()));
    }
    public double getLeftEncodersValue(){
        return (leftFrontEncoder.getPosition() + leftRearEncoder.getPosition())/2;
    }
    public double getRightEncodersValue(){
        return (rightFrontEncoder.getPosition() + rightRearEncoder.getPosition())/2;
    }
    public double getAverageEncoderDistance(){
        return (getLeftEncodersValue() + getRightEncodersValue())/2;
    }
    public void resetEncoders(){
        leftFrontEncoder.setPosition(0.0);
        leftRearEncoder.setPosition(0.0);
        rightFrontEncoder.setPosition(0.0);
        rightRearEncoder.setPosition(0.0);
    }
    public DifferentialDriveWheelSpeeds getWheelSpeed(){
        return new DifferentialDriveWheelSpeeds(getLeftEncodersValue(), getRightEncodersValue());
    }
    public void driveVolts(double leftVolts, double rightVolts){
        leftDrive.setVoltage(leftVolts);
        rightDrive.setVoltage(-rightVolts);
    }
    public void setMaxOutput(double maxOutput){
        diffyDrive.setMaxOutput(maxOutput);
    }
}

